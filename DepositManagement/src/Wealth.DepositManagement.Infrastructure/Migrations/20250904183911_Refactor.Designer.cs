// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wealth.DepositManagement.Infrastructure.UnitOfWorks;

#nullable disable

namespace Wealth.DepositManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WealthDbContext))]
    [Migration("20250904183911_Refactor")]
    partial class Refactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("DepositIdHiLo")
                .IncrementsBy(10);

            modelBuilder.Entity("Wealth.BuildingBlocks.Application.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("Wealth.DepositManagement.Domain.DepositOperations.DepositOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepositId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "Wealth.DepositManagement.Domain.DepositOperations.DepositOperation.Money#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<byte>("CurrencyId")
                                .HasColumnType("smallint");
                        });

                    b.HasKey("Id");

                    b.HasIndex("DepositId");

                    b.ToTable("DepositOperations");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Wealth.DepositManagement.Domain.Deposits.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "DepositIdHiLo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Yield")
                        .HasColumnType("numeric");

                    b.ComplexProperty<Dictionary<string, object>>("Investment", "Wealth.DepositManagement.Domain.Deposits.Deposit.Investment#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<byte>("CurrencyId")
                                .HasColumnType("smallint");
                        });

                    b.HasKey("Id");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Wealth.DepositManagement.Domain.DepositOperations.DepositOperation", b =>
                {
                    b.HasOne("Wealth.DepositManagement.Domain.Deposits.Deposit", null)
                        .WithMany()
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
