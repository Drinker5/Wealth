// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wealth.Aggregation.Infrastructure.UnitOfWorks;

#nullable disable

namespace Wealth.Aggregation.Infrastructure.Migrations
{
    [DbContext(typeof(WealthDbContext))]
    partial class WealthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wealth.Aggregation.Domain.StockAggregation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("LotSize")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StockAggregations");
                });

            modelBuilder.Entity("Wealth.Aggregation.Domain.StockAggregation", b =>
                {
                    b.OwnsOne("Wealth.BuildingBlocks.Domain.Common.Money", "DividendPerYear", b1 =>
                        {
                            b1.Property<Guid>("StockAggregationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("CurrencyId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StockAggregationId");

                            b1.ToTable("StockAggregations");

                            b1.WithOwner()
                                .HasForeignKey("StockAggregationId");
                        });

                    b.OwnsOne("Wealth.BuildingBlocks.Domain.Common.Money", "StockPrice", b1 =>
                        {
                            b1.Property<Guid>("StockAggregationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("CurrencyId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StockAggregationId");

                            b1.ToTable("StockAggregations");

                            b1.WithOwner()
                                .HasForeignKey("StockAggregationId");
                        });

                    b.OwnsOne("Wealth.BuildingBlocks.Domain.Common.Money", "TotalDividends", b1 =>
                        {
                            b1.Property<Guid>("StockAggregationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("CurrencyId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StockAggregationId");

                            b1.ToTable("StockAggregations");

                            b1.WithOwner()
                                .HasForeignKey("StockAggregationId");
                        });

                    b.OwnsOne("Wealth.BuildingBlocks.Domain.Common.Money", "TotalInvestments", b1 =>
                        {
                            b1.Property<Guid>("StockAggregationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("CurrencyId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StockAggregationId");

                            b1.ToTable("StockAggregations");

                            b1.WithOwner()
                                .HasForeignKey("StockAggregationId");
                        });

                    b.Navigation("DividendPerYear")
                        .IsRequired();

                    b.Navigation("StockPrice")
                        .IsRequired();

                    b.Navigation("TotalDividends")
                        .IsRequired();

                    b.Navigation("TotalInvestments")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
