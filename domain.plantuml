@startuml Domain
allowmixing

package Aggregation {
    object IncomeSummary{
        Currencies
        Wallets
        Deposits
    }

    interface API {

    }
}

package PortfolioManagement {
    abstract Portfolio {
        Id
        Assets
        Name
        Currencies
        --
        Add(Name)
        Rename(NewName)
        AddCurrency(Money)
    }
    note right of Portfolio : "ИИС, Бр. счёт"

    object PortfolioAsset {
        InstrumentId
        Quantity
    }

    Portfolio --> PortfolioAsset

    object PortfolioCurrency {
        CurrencyId
        Amount
    }

    Portfolio --> PortfolioCurrency
    
    interface API {
        Portfolios()
        PortfolioAssets(PortfId)
        --
        CreatePortfolio(Name)
        Buy(PortfId, InstrId, Num)
        Sell(PortfId, InstrId, Num)
        Income(PortfId, InstrId, Money, IncomeType)
        Expense(PortfId, InstrId, Money, ExpenseType)
        Deposit(PortfId, Money)
        Withdraw(PortfId, Money)
        Split(InstrumentId, Rate)
        Delist(InstrumentId)
    }

    Entity InstrumentOperation {
        Id
        Date
        InstrumentId
        --
        Add()
    }

    Entity CurrencyOperation {
        Id
        Date
        PortfolioId
        Money
        Type : Deposit, Withdraw
        --
        Add()
    }

    object Trade {
        PortfolioId
        Money
        Amount
        Type : Buy, Sell
    }

    object Cash {
        PortfolioId
        Money
        Type : Coupon, Dividend, Amortization, Tax
    }


    object Split {
        Rate
    }

    object Delist {
    }
    
    InstrumentOperation --> Trade
    InstrumentOperation --> Cash
    InstrumentOperation --> Split
    InstrumentOperation --> Delist
}

package CurrencyManagement {
    abstract Currency {
        Id : ISO 4217
        Name
        Symbol
        Rename(NewName)
    }

    abstract ExchangeRate {
        BaseCurrencyId
        TargetCurrencyId
        Rate
        ValidOnDate
        Convert(Money)
    }

    object Money_VO {
        CurrencyId
        Amount
    }

    protocol DomainEvents {
        CurrencyRenamed
        EchangeAdded
    }

    interface API {
        GET Currency: Currency[]
        GET EchangeRate (fromId, toId, rate, date): Money 
        --
        POST Currency (CreateCurrencyRequest)
        PUT Currency (RenameCurrencyRequest)
        POST ExchangeRate (CreateEchangeRateRequest)
        POST EchangeRate/CheckNewExchangeRates/{fromId}/{toId}
    }
}

package WalletManagement {
    abstract Wallet {
        Id
        Name
        Money
        Operations
        --
        Add
        Change(NewMoney)
    }

    entity WalletOperation {
        Id
        WalletId
        Money
        Type : Income, Expense
        Date
    }

    interface API {
        Wallets
        AddWallet(CurrencyId)
        ChangeMoney(WalletId, Money)
        AddExpense(WalletId, Money)
        AddIncome(WalletId, Money)
    }

    Wallet --> WalletOperation
}

package StrategyTracking {
    abstract Strategy {
        Id
        Name
        Components
    }

    entity StrategyComponent {
        StrategyId
        InstrumentId
        Weight
    }

    Strategy --> StrategyComponent

    interface API {
        Strategy
        AddComponent(StrategyId)
        ChangeWeights(StrategyId)
    }
}

package InstrumentManagement {

    abstract Instrument {
        Id
        Price : Money
        ISIN
        Name
        Type
    }
    object Stock {
        Dividend
    }

    object Bond {
        Coupon
    }

    object Dividend_VO {
        CurrencyId
        ValuePerYear
    }

    object Coupon_VO {
        CurrencyId
        ValuePerYear
    }

    Instrument --> Stock
    Instrument --> Bond

    interface API {
        Instruments
        Instrument
        Stocks
        Bonds
        AddStock()
        AddBond()
        ChangeDividend()
        ChangeCoupon()
        ChangePrice()
    }
}

package DepositManagement {
    abstract Deposit {
        Id
        Name
        Yield
        Investment
        InterestPerYear
        --
        Invest(Money)
        Withdraw(Money)
    }

    entity DepositOperation {
        Id
        Type
        Money
        DateTime
    }
    note right of DepositOperation : "Add, Withdraw"

    object Yield {
        PercentPerYear
    }

    Deposit --> Yield

    interface API {
        Deposits
        Deposit
        Invest(Money)
        Withdraw(Money)
        AddInterest(Money)
    }
}

InstrumentManagement --> CurrencyManagement
PortfolioManagement --> InstrumentManagement
StrategyTracking --> InstrumentManagement
WalletManagement --> CurrencyManagement
DepositManagement --> CurrencyManagement
Aggregation --> WalletManagement
Aggregation --> PortfolioManagement
Aggregation --> DepositManagement
@enduml

