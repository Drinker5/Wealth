@page "/exchange-rates"
@rendermode InteractiveServer
@using Wealth.CurrencyManagement.Application.Currencies.Queries
@using Wealth.CurrencyManagement.Application.ExchangeRates.Queries
@using Wealth.CurrencyManagement.Domain.Repositories
@using Wealth.CurrencyManagement.Application.ExchangeRates.Commands
@inject CqrsInvoker cqrsInvoker
<PageTitle>Currencies</PageTitle>

<h1>Exchange Rates</h1>
<ErrorModal @bind-Show="showErrorModal" @bind-Message="errorMessage" OnClose="() => showErrorModal = false"/>

@if (exchangeRates == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="mb-3">
        <div class="form-row">
            <div class="col-md-3 mb-3">
                <label for="fromCurrency">From Currency</label>
                <CurrencySelect Id="fromCurrency" @bind-SelectedCurrency="CurrentSelectedFrom" Currencies="currencies"/>
            </div>
            <div class="col-md-3 mb-3">
                <label for="toCurrency">To Currency</label>
                <CurrencySelect Id="toCurrency" @bind-SelectedCurrency="CurrentSelectedTo" Currencies="currencies"/>
            </div>
            <div class="col-md-2 mb-3 d-flex align-items-end">
                <button class="btn btn-primary" @onclick="LoadData">Search</button>
            </div>
            <div class="col-md-2 mb-3 d-flex align-items-end">
                <button class="btn btn-primary" @onclick="CheckNewExchangeRates">Check new exchange rates</button>
            </div>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
        <tr>
            <th>From Currency</th>
            <th>To Currency</th>
            <th>Date</th>
            <th>Rate</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var rate in exchangeRates.Items)
        {
            <tr>
                <td>@rate.FromId</td>
                <td>@rate.ToId</td>
                <td>@rate.ValidOnDate.ToString("yyyy-MM-dd")</td>
                <td>@rate.Rate.ToString("N6")</td>
            </tr>
        }
        </tbody>
    </table>

    <div class="pagination-container">
        <nav>
            <ul class="pagination">
                <li class="page-item @(pagination.Page == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(1)">First</button>
                </li>
                <li class="page-item @(pagination.Page == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pagination.Page - 1)">Previous</button>
                </li>

                @for (int i = Math.Max(1, pagination.Page - 2); i <= Math.Min(pagination.TotalPages, pagination.Page + 2); i++)
                {
                    var page = i;
                    <li class="page-item @(i == pagination.Page ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(page)">@i</button>
                    </li>
                }

                <li class="page-item @(pagination.Page >= pagination.TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pagination.Page + 1)">Next</button>
                </li>
                <li class="page-item @(pagination.Page >= pagination.TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pagination.TotalPages)">Last</button>
                </li>
            </ul>
        </nav>
        <div class="page-size-selector">
            <select class="form-control" @bind="pagination.PageSize">
                <option value="10">10 per page</option>
                <option value="25">25 per page</option>
                <option value="50">50 per page</option>
                <option value="100">100 per page</option>
            </select>
        </div>
    </div>

    <div class="pagination-info">
        Showing @((pagination.Page - 1) * pagination.PageSize + 1) to @Math.Min(pagination.Page * pagination.PageSize, pagination.TotalItems) of @pagination.TotalItems entries
    </div>
}

@code {
    private bool showErrorModal = false;
    private string errorMessage = string.Empty;
    private PaginatedResult<ExchangeRateDTO>? exchangeRates;
    private string CurrentSelectedFrom = "USD";
    private string CurrentSelectedTo = "RUB";
    private IEnumerable<string>? currencies;

    private PaginationModel pagination = new PaginationModel
    {
        Page = 1,
        PageSize = 10
    };

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCurrencies();
            await LoadData();
            StateHasChanged();
        }
    }

    private async Task LoadCurrencies()
    {
        var currencyDtos = await cqrsInvoker.Query(new GetCurrenciesQuery());
        currencies = currencyDtos.Select(i => i.CurrencyId.Code);
    }

    private async Task LoadData()
    {
        exchangeRates = await cqrsInvoker.Query(new GetExchangeRatesQuery(
            FromId: CurrentSelectedFrom,
            ToId: CurrentSelectedTo,
            Page: pagination.Page,
            PageSize: pagination.PageSize));

        if (exchangeRates != null)
        {
            pagination.TotalItems = exchangeRates.TotalCount;
            pagination.TotalPages = exchangeRates.TotalCount / pagination.PageSize + (exchangeRates.TotalCount % pagination.PageSize > 0 ? 1 : 0);
        }
    }

    private async Task ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= pagination.TotalPages)
        {
            pagination.Page = newPage;
            await LoadData();
        }
    }

    private class PaginationModel
    {
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalItems { get; set; }
        public int TotalPages { get; set; }
    }

    private async Task CheckNewExchangeRates()
    {
        try
        {
            await cqrsInvoker.Command(new CheckNewExchangeRatesCommand(CurrentSelectedFrom, CurrentSelectedTo));
        }
        catch (Exception ex)
        {
            errorMessage = $"Operation failed: {ex.Message}";
            showErrorModal = true;
            StateHasChanged();
        }
    }

}
