name: Wealth
services:
  currency-management:
    build:
      context: ./CurrencyManagement
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__CurrencyManagement=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=CurrencyManagement;
    ports:
      - 5000:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  instrument-management:
    build:
      context: ./InstrumentManagement
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__currency__http=currency-management
      - ConnectionStrings__InstrumentManagement=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=InstrumentManagement;
      - ConnectionStrings__Master=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=postgres;
    ports:
      - 5001:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  instrument-management-poller:
    build:
      context: ./OutboxPoller
      target: app
      dockerfile: ./Dockerfile
    command:
      - "outbox"
      - "-connectionString=postgres://postgres:postgres@postgres/InstrumentManagement?sslmode=disable"
      - "-kafka-brokers=kafka"
      - "-kafka-topic=wealth.instrument-management"
      - "-period=2000"
    restart: on-failure
    labels:
      com.jetbrains.rider.debug: false

  portfolio-management:
    build:
      context: ./PortfolioManagement
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__currency__http=currency-management
      - Services__instrument__http=instrument-management
      - ConnectionStrings__PortfolioManagement=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=PortfolioManagement;
    ports:
      - 5002:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  portfolio-management-poller:
    build:
      context: ./OutboxPoller
      target: app
      dockerfile: ./Dockerfile
    command:
      - "outbox"
      - "-connectionString=postgres://postgres:postgres@postgres/PortfolioManagement?sslmode=disable"
      - "-kafka-brokers=kafka"
      - "-kafka-topic=wealth.portfolio-management"
      - "-period=2000"
    restart: on-failure
    labels:
      com.jetbrains.rider.debug: false

  aggregation:
    build:
      context: ./Aggregation
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__currency__http=currency-management
      - Services__instrument__http=instrument-management
      - Services__portfolio__http=portfolio-management
      - ConnectionStrings__Aggregation=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=Aggregation;
      - KafkaConsumer__BootstrapServers=kafka
    ports:
      - 5003:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  deposit-management:
    build:
      context: ./DepositManagement
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__currency__http=currency-management
      - ConnectionStrings__DepositManagement=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=DepositManagement;
    ports:
      - 5004:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  wallet-management:
    build:
      context: ./WalletManagement
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__currency__http=currency-management
      - ConnectionStrings__WalletManagement=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=WalletManagement;
    ports:
      - 5005:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  strategy-tracking:
    build:
      context: ./StrategyTracking
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__currency__http=currency-management
      - Services__instrument__http=instrument-management
      - ConnectionStrings__StrategyTracking=Host=postgres;Username=postgres;Password=postgres;Persist Security Info=True;Database=StrategyTracking;
    ports:
      - 5006:80
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
        

  kafka:
    image: bitnami/kafka:latest
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      start_period: 15s
      interval: 10s
    environment:
      - KAFKA_CLUSTER_ID=2_HrHg4mRZCyGDrt-PHglA
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

  init-kafka:
    image: apache/kafka:latest
    working_dir: /opt/kafka/bin/
    entrypoint: /bin/bash
    depends_on:
      kafka:
        condition: service_healthy
    command:
      - -c 
      - ./kafka-topics.sh --create --if-not-exists --topic "wealth.currency-management" --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&  
        ./kafka-topics.sh --create --if-not-exists --topic "wealth.instrument-management" --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
        ./kafka-topics.sh --create --if-not-exists --topic "wealth.portfolio-management" --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1

  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432

  pgAdmin:
    image: dpage/pgadmin4:latest
    ports:
      - 5050:80
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=postgres
      - PGADMIN_CONFIG_SERVER_MODE=False