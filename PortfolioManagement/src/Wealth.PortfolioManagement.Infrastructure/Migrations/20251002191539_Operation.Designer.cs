// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wealth.PortfolioManagement.Infrastructure.UnitOfWorks;

#nullable disable

namespace Wealth.PortfolioManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WealthDbContext))]
    [Migration("20251002191539_Operation")]
    partial class Operation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("PortfolioIdHiLo")
                .IncrementsBy(10);

            modelBuilder.Entity("Wealth.BuildingBlocks.Application.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Application.Providers.PortfolioIdMap", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.HasKey("AccountId");

                    b.ToTable("PortfolioIdMaps");
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.Operation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("operation_type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("InstrumentOperations");

                    b.HasDiscriminator<byte>("operation_type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.BondAsset", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int>("BondId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PortfolioId", "BondId");

                    b.ToTable("BondAsset");
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "PortfolioIdHiLo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.PortfolioCurrency", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.HasKey("PortfolioId", "CurrencyId");

                    b.ToTable("PortfolioCurrency");
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.StockAsset", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PortfolioId", "StockId");

                    b.ToTable("StockAsset");
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.CashOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.Operation");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "Wealth.PortfolioManagement.Domain.Operations.CashOperation.Money#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric");

                            b1.Property<byte>("CurrencyId")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("smallint");
                        });

                    b.ToTable("InstrumentOperations", t =>
                        {
                            t.Property("PortfolioId")
                                .HasColumnName("CashOperation_PortfolioId");

                            t.Property("Type")
                                .HasColumnName("CashOperation_Type");
                        });

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.CurrencyOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.Operation");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "Wealth.PortfolioManagement.Domain.Operations.CurrencyOperation.Money#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric");

                            b1.Property<byte>("CurrencyId")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("smallint");
                        });

                    b.HasDiscriminator().HasValue((byte)0);
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.SplitOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.Operation");

                    b.ComplexProperty<Dictionary<string, object>>("Ratio", "Wealth.PortfolioManagement.Domain.Operations.SplitOperation.Ratio#SplitRatio", b1 =>
                        {
                            b1.Property<int>("New")
                                .HasColumnType("integer");

                            b1.Property<int>("Old")
                                .HasColumnType("integer");
                        });

                    b.HasDiscriminator().HasValue((byte)5);
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.StockDelistOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.Operation");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue((byte)4);
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.TradeOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.Operation");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "Wealth.PortfolioManagement.Domain.Operations.TradeOperation.Amount#Money", b1 =>
                        {
                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<byte>("CurrencyId")
                                .HasColumnType("smallint");
                        });

                    b.ToTable("InstrumentOperations", t =>
                        {
                            t.Property("PortfolioId")
                                .HasColumnName("TradeOperation_PortfolioId");

                            t.Property("Type")
                                .HasColumnName("TradeOperation_Type");
                        });
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.BondTradeOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.TradeOperation");

                    b.Property<int>("BondId")
                        .HasColumnType("integer");

                    b.ToTable("InstrumentOperations", t =>
                        {
                            t.Property("PortfolioId")
                                .HasColumnName("TradeOperation_PortfolioId");

                            t.Property("Type")
                                .HasColumnName("TradeOperation_Type");
                        });

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Operations.StockTradeOperation", b =>
                {
                    b.HasBaseType("Wealth.PortfolioManagement.Domain.Operations.TradeOperation");

                    b.Property<int>("StockId")
                        .HasColumnType("integer");

                    b.ToTable("InstrumentOperations", t =>
                        {
                            t.Property("PortfolioId")
                                .HasColumnName("TradeOperation_PortfolioId");

                            t.Property("Type")
                                .HasColumnName("TradeOperation_Type");

                            t.Property("StockId")
                                .HasColumnName("StockTradeOperation_StockId");
                        });

                    b.HasDiscriminator().HasValue((byte)3);
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.BondAsset", b =>
                {
                    b.HasOne("Wealth.PortfolioManagement.Domain.Portfolios.Portfolio", null)
                        .WithMany("Bonds")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.PortfolioCurrency", b =>
                {
                    b.HasOne("Wealth.PortfolioManagement.Domain.Portfolios.Portfolio", null)
                        .WithMany("Currencies")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.StockAsset", b =>
                {
                    b.HasOne("Wealth.PortfolioManagement.Domain.Portfolios.Portfolio", null)
                        .WithMany("Stocks")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wealth.PortfolioManagement.Domain.Portfolios.Portfolio", b =>
                {
                    b.Navigation("Bonds");

                    b.Navigation("Currencies");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
